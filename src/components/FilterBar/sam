import React, { useState, useEffect, useRef } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  ScrollView,
  StyleSheet,
  Image,
} from 'react-native';
import { SlidersHorizontal } from 'lucide-react-native';
import { getBrands } from '../../apis/getBrands';
import { getBreeds } from '../../apis/getBreeds';
import RBSheet from 'react-native-raw-bottom-sheet'; // Import the bottom sheet component

const FilterBar = ({
  collectionName,
  selectedBrand,
  selectedBreed,
  setSelectedBrand,
  setSelectedBreed,
  setFiltersApplied, // Adding this to notify when filters are applied
}) => {
  const [brands, setBrands] = useState([]);
  const [breeds, setBreeds] = useState([]);
  const bottomSheetRef = useRef(); // Reference for the bottom sheet

  useEffect(() => {
    const fetchBrands = async () => {
      try {
        const response = await getBrands();
        setBrands(response.data.data);
      } catch (error) {
        console.error('Error fetching brands:', error);
      }
    };

    const fetchBreeds = async () => {
      try {
        const response = await getBreeds();
        setBreeds(response.data.data);
      } catch (error) {
        console.error('Error fetching breeds:', error);
      }
    };

    fetchBrands();
    fetchBreeds();
  }, []);

  const openBottomSheet = () => {
    bottomSheetRef.current.open(); // Open the bottom sheet when the filter button is pressed
  };

  const handleApplyFilters = () => {
    setFiltersApplied(true); // Notify that filters are applied
    bottomSheetRef.current.close(); // Close the bottom sheet after applying filters
  };

  const handleClearAll = () => {
    setSelectedBrand(null);
    setSelectedBreed(null);
    setFiltersApplied(false); // Reset applied filter flag
  };

  return (
    <View style={styles.container}>
      <ScrollView
        horizontal
        showsHorizontalScrollIndicator={false}
        style={styles.scrollView}
      >
        <TouchableOpacity style={[styles.button]} onPress={openBottomSheet}>
          <SlidersHorizontal size={20} color="#333" />
          <Text style={[styles.buttonText, styles.activeText]}>FILTERS</Text>
        </TouchableOpacity>
        {selectedBrand && (
          <View style={styles.chip}>
            <Text style={styles.chipText}>Brand: {selectedBrand}</Text>
            <TouchableOpacity onPress={() => setSelectedBrand(null)}>
              <Text style={styles.chipRemoveText}>x</Text>
            </TouchableOpacity>
          </View>
        )}
        {selectedBreed && (
          <View style={styles.chip}>
            <Text style={styles.chipText}>Breed: {selectedBreed}</Text>
            <TouchableOpacity onPress={() => setSelectedBreed(null)}>
              <Text style={styles.chipRemoveText}>x</Text>
            </TouchableOpacity>
          </View>
        )}
      </ScrollView>

      {/* Bottom Sheet for selecting filters */}
      <RBSheet
        ref={bottomSheetRef}
        height={400}
        openDuration={250}
        closeDuration={200}
        customStyles={{
          container: {
            borderTopLeftRadius: 20,
            borderTopRightRadius: 20,
            backgroundColor: '#FFF',
            paddingBottom: 0,
          },
        }}
      >
        <View style={styles.bottomSheetContent}>
          <Text style={styles.filterTitle}>Filters</Text>
          <View style={styles.filterSection}>
            <Text style={styles.sectionTitle}>Brand</Text>
            <View style={styles.optionRow}>
              {brands.map(brand => (
                <TouchableOpacity
                  key={brand._id}
                  style={[
                    styles.optionButton,
                    selectedBrand === brand.slug && styles.selectedOption,
                  ]}
                  onPress={() => setSelectedBrand(brand.slug)}
                >
                  <Image
                    source={{ uri: brand.logo }}
                    style={styles.brandLogo}
                  />
                  <Text style={styles.optionText}>{brand.name}</Text>
                </TouchableOpacity>
              ))}
            </View>
          </View>

          <View style={styles.filterSection}>
            <Text style={styles.sectionTitle}>Breed</Text>
            <View style={styles.optionRow}>
              {breeds.map(breed => (
                <TouchableOpacity
                  key={breed._id}
                  style={[
                    styles.optionButton,
                    selectedBreed === breed.slug && styles.selectedOption,
                  ]}
                  onPress={() => setSelectedBreed(breed.slug)}
                >
                  <Text style={styles.optionText}>{breed.name}</Text>
                </TouchableOpacity>
              ))}
            </View>
          </View>

          {/* Apply and Clear All Buttons */}
          <View style={styles.buttonsContainer}>
            <TouchableOpacity
              style={styles.clearButton}
              onPress={handleClearAll}
            >
              <Text style={styles.clearText}>CLEAR ALL</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.applyButton}
              onPress={handleApplyFilters}
            >
              <Text style={styles.applyText}>APPLY</Text>
            </TouchableOpacity>
          </View>
        </View>
      </RBSheet>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    paddingVertical: 5,
    backgroundColor: '#FFFBF6',
    borderBottomWidth: 1,
    borderColor: '#ddd',
  },
  scrollView: {
    flexDirection: 'row',
    paddingHorizontal: 10,
  },
  button: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 10,
    paddingHorizontal: 20,
    marginHorizontal: 5,
  },
  buttonText: {
    fontSize: 14,
    color: '#333',
    marginLeft: 5,
  },
  activeText: {
    color: '#000',
  },
  chip: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'transparent',
    borderRadius: 9,
    marginRight: 12,
    paddingHorizontal: 12,
    paddingVertical: 2,
    borderColor: 'black',
    borderWidth: 0.5,
  },
  chipText: {
    color: '#000',
    fontSize: 14,
  },
  chipRemoveText: {
    color: '#000',
    marginLeft: 8,
    fontWeight: 'bold',
  },
  bottomSheetContent: {
    padding: 20,
  },
  filterTitle: {
    fontSize: 22,
    fontWeight: 'bold',
    marginBottom: 20,
  },
  filterSection: {
    marginBottom: 20,
  },
  sectionTitle: {
    fontSize: 18,
    marginBottom: 10,
    fontWeight: 'bold',
  },
  optionRow: {
    flexDirection: 'row',
    flexWrap: 'wrap',
  },
  optionButton: {
    backgroundColor: '#e6f5f7',
    padding: 10,
    marginRight: 10,
    borderRadius: 10,
    marginBottom: 10,
  },
  selectedOption: {
    backgroundColor: '#0888B1',
  },
  optionText: {
    fontSize: 14,
    color: '#333',
  },
  buttonsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 20,
  },
  clearButton: {
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 10,
  },
  applyButton: {
    backgroundColor: '#FFA500',
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 10,
  },
  clearText: {
    fontSize: 16,
    color: '#FFA500',
    fontWeight: 'bold',
  },
  applyText: {
    fontSize: 16,
    color: '#fff',
    fontWeight: 'bold',
  },
});

export default FilterBar;
